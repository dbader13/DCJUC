######################################################################
# this source code is used to check if a genome pair generated by our 
# satify our requirements.
######################################################################

import sys

# prepare maps of two genomes
# key: gene id 
# value: number of occurance of that gene
def prepare_dic(genome):
    m = {}
    for item in genome:
        if abs(int(item)) in m:
            m[abs(int(item))] += 1
        else:
            m[abs(int(item))] = 1
    return m

# read file and prepare the map
def prepare_maps(f_in):
    reader = open(f_in)    
    lines = reader.readlines()
    genome1 = lines[1].strip().split(" ")
    genome2 = lines[3].strip().split(" ")
    map1 = prepare_dic(genome1)
    map2 = prepare_dic(genome2)
    return map1, map2

# check if both genomes has duplications
# returns True:     if yes
# returns False:    if no
def check_if_both_duplicated(m1, m2):
    res1 = False
    res2 = False
    for key in m1:
        if m1[key] > 1:
            res1 = True
    for key in m2:
        if m2[key] > 1:
            res2 = True
    return (res1 and res2)

# returns:
# 1: same content and same occurance
# 2: same content buf different num of occurance
# 3: different content and dffferent num of occurance
def check_if_same_content(m1, m2):
    for key in m1:
        if key not in m2:
            return 3
        elif (key in m2) and (m1[key] != m2[key]):
            return 2
    for key in m2:
        if key not in m1:
            return 3
        elif (key in m1) and (m1[key] != m2[key]):
            return 2
    return 1
    
# balanced means:
# 1) each genome has the same content genes
# 2) each gene has the same number of occurances
def check_if_balanced(f_in):
    map1, map2 = prepare_maps(f_in)
    if check_if_same_content(map1, map2) == 1:
        print "pass the balance test"
    else:
        print "do not pass the balance test"
            
# unbalanced means:
# 1) each genome has different content genes
# 2) each gene might not have the same number of occurances
# 3) each genome has to have some duplications
def check_if_unbalanced(f_in):
    map1, map2 = prepare_maps(f_in)
    res1 = check_if_same_content(map1, map2)
    res2 = check_if_both_duplicated(map1, map2)
    if (res1 != 1) and res2 == True:
        print "pass the unbalance test"
    else:
        print "do not pass the unbalance test"
        print res1, res2


check_if_balanced(sys.argv[1])
check_if_unbalanced(sys.argv[1])
